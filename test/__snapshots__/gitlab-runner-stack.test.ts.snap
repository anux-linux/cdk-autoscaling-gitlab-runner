// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gitlab-runner 1`] = `
Object {
  "Mappings": Object {
    "ManagerAutoscalingGroupAmiMap402DC0D6": Object {
      "ap-northeast-1": Object {
        "ami": "ami-0f9ae750e8274075b",
      },
      "ap-northeast-2": Object {
        "ami": "ami-047f7b46bd6dd5d84",
      },
      "ap-south-1": Object {
        "ami": "ami-0889b8a448de4fc44",
      },
      "ap-southeast-1": Object {
        "ami": "ami-0b419c3a4b01d1859",
      },
      "ap-southeast-2": Object {
        "ami": "ami-04481c741a0311bbb",
      },
      "ca-central-1": Object {
        "ami": "ami-03338e1f67dae0168",
      },
      "eu-central-1": Object {
        "ami": "ami-09def150731bdbcc2",
      },
      "eu-north-1": Object {
        "ami": "ami-d16fe6af",
      },
      "eu-west-1": Object {
        "ami": "ami-07683a44e80cd32c5",
      },
      "eu-west-2": Object {
        "ami": "ami-09ead922c1dad67e4",
      },
      "eu-west-3": Object {
        "ami": "ami-0451ae4fd8dd178f7",
      },
      "sa-east-1": Object {
        "ami": "ami-0669a96e355eac82f",
      },
      "us-east-1": Object {
        "ami": "ami-0de53d8956e8dcf80",
      },
      "us-east-2": Object {
        "ami": "ami-02bcbb802e03574ba",
      },
      "us-west-1": Object {
        "ami": "ami-0019ef04ac50be30f",
      },
      "us-west-2": Object {
        "ami": "ami-061392db613a6357b",
      },
    },
  },
  "Resources": Object {
    "GitlabRunnerCacheBucketD970991B": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "GitlabRunnerCacheBucketKey33399B97",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationDate": "2021-11-09T00:00:00",
              "Status": "Enabled",
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "GitlabRunnerCacheBucketKey33399B97": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "Description": "Created by gitlab-runner/GitlabRunnerCacheBucket",
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "ManagerAutoscalingGroupASGE4841860": Object {
      "CreationPolicy": Object {
        "ResourceSignal": Object {
          "Count": 1,
          "Timeout": "PT15M",
        },
      },
      "Metadata": Object {
        "AWS::CloudFormation::Init": Object {
          "config": Object {
            "files": Object {
              "/etc/gitlab-runner/config.toml": Object {
                "content": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "
            concurrent = 10
            check_interval = 0
            [[runners]]
              name = \\"gitlab-runner\\"
              url = \\"https://gitlab.com\\"
              token = \\"\\"
              executor = \\"docker+machine\\"
              limit = \\"20\\"
              environment = [
                \\"DOCKER_DRIVER=overlay2\\",
                \\"DOCKER_TLS_CERTDIR=/certs\\"
              ]
              [runners.docker]
                tls_verify = false
                image = \\"alpine\\"
                privileged = true
                disable_cache = false
                volumes = [\\"/certs/client\\", \\"/cache\\"]
                shm_size = 0
              [runners.cache]
                Type = \\"s3\\"
                Shared = true
              [runners.cache.s3]
                ServerAddress = \\"s3.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                      "\\"
                BucketName = \\"runnercache\\"
                BucketLocation = \\"",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      "\\"
              [runners.machine]
                IdleCount = 10
                IdleTime = 300
                MaxBuilds = 25
                MachineDriver = \\"amazonec2\\"
                MachineName = \\"gitlab-docker-machine-%s\\"
                MachineOptions = [
                  \\"amazonec2-instance-type=t3.nano\\",
                  \\"amazonec2-region=",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      "\\",
                  \\"amazonec2-vpc-id=vpc123\\",
                  \\"amazonec2-zone=a\\",
                  \\"amazonec2-subnet-id=priv1\\",
                  \\"amazonec2-security-group=gitlab-runner-RunnersSecurityGroup\\",
                  \\"amazonec2-use-private-address=true\\",
                  \\"amazonec2-iam-instance-profile=RunnersInstanceProfile\\",
                  \\"amazonec2-request-spot-instance=true\\",
                  \\"amazonec2-spot-price=0.03\\"
                ]
                [[runners.machine.autoscaling]]
                  Timezone = \\"UTC\\"
                  Periods = [\\"* * 0-8,18-23 * * mon-fri *\\", \\"* * * * * sat,sun *\\"]
                  IdleCount = 20
                  IdleTime = 600
            ",
                    ],
                  ],
                },
                "encoding": "plain",
                "group": "gitlab-runner",
                "mode": "000600",
                "owner": "gitlab-runner",
              },
              "/etc/rsyslog.d/25-gitlab-runner.conf": Object {
                "content": "
            :programname, isequal, \\"gitlab-runner\\" /var/log/gitlab-runner.log
          ",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
            "services": Object {
              "sysvinit": Object {
                "gitlab-runner": Object {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": Array [
                    "/etc/gitlab-runner/config.toml",
                  ],
                },
                "rsyslog": Object {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": Array [
                    "/etc/rsyslog.d/25-gitlab-runner.conf",
                  ],
                },
              },
            },
          },
          "configSets": Object {
            "config": Array [
              "config",
            ],
            "default": Array [
              "config",
              "restart",
            ],
            "install": Array [
              "repositories",
              "packages",
            ],
            "restart": Array [
              "restart",
            ],
          },
          "packages": Object {
            "commands": Object {
              "10-docker-machine": Object {
                "command": "curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-\`uname -s\`-\`uname -m\` > /tmp/docker-machine && install /tmp/docker-machine /usr/bin/docker-machine",
              },
              "20-gitlab-runner-start": Object {
                "command": "gitlab-runner start",
              },
            },
            "files": Object {
              "/etc/cfn/cfn-hup.conf": Object {
                "content": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "
              [main]
              stack=gitlab-runner
              region=",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      "
            ",
                    ],
                  ],
                },
                "encoding": "plain",
                "group": "root",
                "mode": "000400",
                "owner": "root",
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": Object {
                "content": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "
              [cfn-auto-reloader-hook]
              triggers=post.update
              path=Resources.Manager.Metadata.AWS::CloudFormation::Init
              action=/opt/aws/bin/cfn-init -v --stack gitlab-runner --region ",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      " --resource ManagerLaunchTemplate --configsets default
              runas=root
            ",
                    ],
                  ],
                },
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
            "packages": Object {
              "yum": Object {
                "docker": Array [],
                "gitlab-runner": Array [],
                "tzdata": Array [],
              },
            },
            "services": Object {
              "sysvinit": Object {
                "cfn-hup": Object {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": Array [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf",
                  ],
                },
              },
            },
          },
          "repositories": Object {
            "commands": Object {
              "10-gitlab-runner": Object {
                "command": "curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | bash",
              },
            },
          },
          "restart": Object {
            "commands": Object {
              "10-gitlab-runner-restart": Object {
                "command": "gitlab-runner restart",
              },
            },
          },
        },
      },
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "ManagerAutoscalingGroupLaunchConfig078E7BD8",
        },
        "MaxSize": "1",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "gitlab-runner/ManagerAutoscalingGroup",
          },
        ],
        "VPCZoneIdentifier": Array [
          "priv1",
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingRollingUpdate": Object {
          "PauseTime": "PT15M",
          "SuspendProcesses": Array [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions",
          ],
          "WaitOnResourceSignals": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ManagerAutoscalingGroupInstanceProfile7C061EF0": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ManagerRole08FB5B64",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ManagerAutoscalingGroupLaunchConfig078E7BD8": Object {
      "DependsOn": Array [
        "ManagerRoleDefaultPolicy9C31350E",
        "ManagerRole08FB5B64",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "ManagerAutoscalingGroupInstanceProfile7C061EF0",
        },
        "ImageId": Object {
          "Fn::FindInMap": Array [
            "ManagerAutoscalingGroupAmiMap402DC0D6",
            Object {
              "Ref": "AWS::Region",
            },
            "ami",
          ],
        },
        "InstanceType": "t2.micro",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ManagerSecurityGroup288FD437",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
yum update -y aws-cfn-bootstrap
/opt/aws/bin/cfn-init --stack 'gitlab-runner' --region '",
                Object {
                  "Ref": "AWS::Region",
                },
                "' --resource Manager --configsets default
/opt/aws/bin/cfn-signal -e $? --stack '",
                Object {
                  "Ref": "AWS::Region",
                },
                "' --region '",
                Object {
                  "Ref": "AWS::Region",
                },
                "' --resource Manager
# fingerprint: 47276c6476a51f91
(
  set +e
  /opt/aws/bin/cfn-init -v --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource ManagerAutoscalingGroupASGE4841860 -c default
  /opt/aws/bin/cfn-signal -e $? --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource ManagerAutoscalingGroupASGE4841860
  cat /var/log/cfn-init.log >&2
)",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ManagerRole08FB5B64": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "s3:ListObjects*",
                    "s3:GetObject*",
                    "s3:DeleteObject*",
                    "s3:PutObject*",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        Object {
                          "Fn::GetAtt": Array [
                            "GitlabRunnerCacheBucketD970991B",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                },
                Object {
                  "Action": "s3:ListBucket",
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "GitlabRunnerCacheBucketD970991B",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Cache",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "ec2:CreateKeyPair",
                    "ec2:DeleteKeyPair",
                    "ec2:ImportKeyPair",
                    "ec2:Describe*",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": Array [
                    "ec2:CreateTags",
                    "ssm:UpdateInstanceInformation",
                  ],
                  "Condition": Object {
                    "ForAllValues:StringEquals": Object {
                      "aws:TagKeys": Array [
                        "Name",
                      ],
                    },
                    "StringEquals": Object {
                      "ec2:InstanceType": "toString() {
        return this.instanceTypeIdentifier;
    }",
                      "ec2:Region": Object {
                        "Ref": "AWS::Region",
                      },
                    },
                    "StringLike": Object {
                      "aws:RequestTag/Name": "*gitlab-docker-machine-*",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": Array [
                    "ec2:RunInstances",
                    "ec2:RequestSpotInstances",
                  ],
                  "Condition": Object {
                    "ArnEqualsIfExists": Object {
                      "ec2:InstanceProfile": Object {
                        "Fn::GetAtt": Array [
                          "RunnersInstanceProfile",
                          "Arn",
                        ],
                      },
                      "ec2:Vpc": Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            "arn:",
                            Object {
                              "Ref": "AWS::Partition",
                            },
                            ":ec2:",
                            Object {
                              "Ref": "AWS::Partition",
                            },
                            ":",
                            Object {
                              "Ref": "AWS::AccountId",
                            },
                            ":vpc/vpc123",
                          ],
                        ],
                      },
                    },
                    "StringEqualsIfExists": Object {
                      "ec2:InstanceType": "toString() {
        return this.instanceTypeIdentifier;
    }",
                      "ec2:Region": Object {
                        "Ref": "AWS::Region",
                      },
                      "ec2:Tenancy": "default",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": Array [
                    "ec2:TerminateInstances",
                    "ec2:StopInstances",
                    "ec2:StartInstances",
                    "ec2:RebootInstances",
                  ],
                  "Condition": Object {
                    "ArnEquals": Object {
                      "ec2:InstanceProfile": Object {
                        "Fn::GetAtt": Array [
                          "RunnersInstanceProfile",
                          "Arn",
                        ],
                      },
                    },
                    "StringLike": Object {
                      "ec2:ResourceTag/Name": "*gitlab-docker-machine-*",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": "iam:PassRole",
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "RunnersRole1AC39F4E",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Runners",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ManagerRoleDefaultPolicy9C31350E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AWS::StackId",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ManagerRoleDefaultPolicy9C31350E",
        "Roles": Array [
          Object {
            "Ref": "ManagerRole08FB5B64",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ManagerSecurityGroup288FD437": Object {
      "Properties": Object {
        "GroupDescription": "Security group for GitLab Runners Manager.",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "SSH traffic",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22,
          },
        ],
        "VpcId": "vpc123",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RunnersInstanceProfile": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "RunnersRole1AC39F4E",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "RunnersRole1AC39F4E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RunnersSecurityGroupfrom0000022579A51D9": Object {
      "Properties": Object {
        "CidrIp": "0.0.0.0/0",
        "Description": "SSH traffic from Manager",
        "FromPort": 22,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ManagerSecurityGroup288FD437",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 22,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RunnersSecurityGroupfrom0000023769FED4A35": Object {
      "Properties": Object {
        "CidrIp": "0.0.0.0/0",
        "Description": "SSH traffic from Docker",
        "FromPort": 2376,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ManagerSecurityGroup288FD437",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 2376,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
  },
}
`;
