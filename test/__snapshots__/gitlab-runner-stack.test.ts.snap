// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gitlab-runner 1`] = `
Object {
  "Mappings": Object {
    "AmiMap": Object {
      "eu-central-1": Object {
        "ami": "ami-0a49b025fffbbdac6",
      },
      "us-east-1": Object {
        "ami": "ami-083654bd07b5da81d",
      },
      "us-west-1": Object {
        "ami": "ami-053ac55bdcfe96e85",
      },
    },
    "ManagerAutoscalingGroupAmiMap402DC0D6": Object {
      "ap-northeast-1": Object {
        "ami": "ami-0f9ae750e8274075b",
      },
      "ap-northeast-2": Object {
        "ami": "ami-047f7b46bd6dd5d84",
      },
      "ap-south-1": Object {
        "ami": "ami-0889b8a448de4fc44",
      },
      "ap-southeast-1": Object {
        "ami": "ami-0b419c3a4b01d1859",
      },
      "ap-southeast-2": Object {
        "ami": "ami-04481c741a0311bbb",
      },
      "ca-central-1": Object {
        "ami": "ami-03338e1f67dae0168",
      },
      "eu-central-1": Object {
        "ami": "ami-09def150731bdbcc2",
      },
      "eu-north-1": Object {
        "ami": "ami-d16fe6af",
      },
      "eu-west-1": Object {
        "ami": "ami-07683a44e80cd32c5",
      },
      "eu-west-2": Object {
        "ami": "ami-09ead922c1dad67e4",
      },
      "eu-west-3": Object {
        "ami": "ami-0451ae4fd8dd178f7",
      },
      "sa-east-1": Object {
        "ami": "ami-0669a96e355eac82f",
      },
      "us-east-1": Object {
        "ami": "ami-0de53d8956e8dcf80",
      },
      "us-east-2": Object {
        "ami": "ami-02bcbb802e03574ba",
      },
      "us-west-1": Object {
        "ami": "ami-0019ef04ac50be30f",
      },
      "us-west-2": Object {
        "ami": "ami-061392db613a6357b",
      },
    },
  },
  "Parameters": Object {
    "AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1ArtifactHash0128B949": Object {
      "Description": "Artifact hash for asset \\"1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1\\"",
      "Type": "String",
    },
    "AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3Bucket4842F32D": Object {
      "Description": "S3 bucket for asset \\"1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1\\"",
      "Type": "String",
    },
    "AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3VersionKeyD0A0B57A": Object {
      "Description": "S3 key for asset version \\"1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "CacheBucket41D9D0B0": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "gitlab-runner-runnercache-undefined-undefined",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "ExpirationDate": "2021-12-10T00:00:00",
              "Status": "Disabled",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "CacheBucketAutoDeleteObjectsCustomResource12E72BBC": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CacheBucketPolicyE2F00ED4",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "CacheBucket41D9D0B0",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "CacheBucketPolicyE2F00ED4": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "CacheBucket41D9D0B0",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CacheBucket41D9D0B0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CacheBucket41D9D0B0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": Object {
      "DependsOn": Array [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3Bucket4842F32D",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3VersionKeyD0A0B57A",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3VersionKeyD0A0B57A",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Lambda function for auto-deleting objects in ",
              Object {
                "Ref": "CacheBucket41D9D0B0",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ManagerAutoscalingGroupASGE4841860": Object {
      "CreationPolicy": Object {
        "ResourceSignal": Object {
          "Count": 1,
          "Timeout": "PT15M",
        },
      },
      "Metadata": Object {
        "AWS::CloudFormation::Init": Object {
          "cfnHup": Object {
            "files": Object {
              "/etc/cfn/cfn-hup.conf": Object {
                "content": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "[main]
stack=gitlab-runner
region=",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      "
verbose=true",
                    ],
                  ],
                },
                "encoding": "plain",
                "group": "root",
                "mode": "000400",
                "owner": "root",
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": Object {
                "content": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "[cfn-auto-reloader-hook]
triggers=post.update
path=Resources.ManagerAutoscalingGroup.Metadata.AWS::CloudFormation::Init
action=/opt/aws/bin/cfn-init -v --stack gitlab-runner --region ",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      " --resource ManagerAutoscalingGroup --configsets default
runas=root",
                    ],
                  ],
                },
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
            "services": Object {
              "sysvinit": Object {
                "cfn-hup": Object {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": Array [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf",
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf",
                  ],
                },
              },
            },
          },
          "config": Object {
            "files": Object {
              "/etc/gitlab-runner/config.toml": Object {
                "content": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "concurrent = 10
check_interval = 0
[[runners]]
  name = \\"gitlab-runner\\"
  url = \\"https://gitlab.com\\"
  token = \\"\\"
  executor = \\"docker+machine\\"
  limit = 20
  output_limit = 52428800
  environment = [
    \\"DOCKER_DRIVER=overlay2\\",
    \\"DOCKER_TLS_CERTDIR=/certs\\"
  ]
  [runners.docker]
    tls_verify = false
    image = \\"docker:19.03.5\\"
    privileged = true
    cap_add = [\\"CAP_SYS_ADMIN\\"]
    wait_for_services_timeout = 300
    disable_cache = false
    volumes = [\\"/certs/client\\", \\"/cache\\"]
    shm_size = 0
  [runners.cache]
    Type = \\"s3\\"
    Shared = true
  [runners.cache.s3]
    ServerAddress = \\"s3.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                      "\\"
    BucketName = \\"gitlab-runner-runnercache-undefined-undefined\\"
    BucketLocation = \\"",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      "\\"
  [runners.machine]
    IdleCount = 0
    IdleTime = 300
    MaxBuilds = 10
    MachineDriver = \\"amazonec2\\"
    MachineName = \\"gitlab-runner-%s\\"
    MachineOptions = [
      \\"amazonec2-instance-type=t3.micro\\",
      \\"amazonec2-ami=",
                      Object {
                        "Fn::FindInMap": Array [
                          "AmiMap",
                          Object {
                            "Ref": "AWS::Region",
                          },
                          "ami",
                        ],
                      },
                      "\\",
      \\"amazonec2-region=",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      "\\",
      \\"amazonec2-vpc-id=vpc123\\",
      \\"amazonec2-zone=a\\",
      \\"amazonec2-subnet-id=priv1\\",
      \\"amazonec2-security-group=gitlab-runner-RunnersSecurityGroup\\",
      \\"amazonec2-use-private-address=true\\",
      \\"amazonec2-iam-instance-profile=RunnersInstanceProfile\\",
      \\"amazonec2-request-spot-instance=true\\",
      \\"amazonec2-spot-price=0.03\\"
    ]
    [[runners.machine.autoscaling]]
      Timezone = \\"UTC\\"
      Periods = [\\"* * 11-23 * * mon-fri *\\"]
      IdleCount = 1
      IdleTime = 1800",
                    ],
                  ],
                },
                "encoding": "plain",
                "group": "gitlab-runner",
                "mode": "000600",
                "owner": "gitlab-runner",
              },
              "/etc/rsyslog.d/25-gitlab-runner.conf": Object {
                "content": ":programname, isequal, \\"gitlab-runner\\" /var/log/gitlab-runner.log",
                "encoding": "plain",
                "group": "root",
                "mode": "000644",
                "owner": "root",
              },
            },
            "services": Object {
              "sysvinit": Object {
                "gitlab-runner": Object {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": Array [
                    "/etc/gitlab-runner/config.toml",
                  ],
                },
                "rsyslog": Object {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": Array [
                    "/etc/rsyslog.d/25-gitlab-runner.conf",
                  ],
                },
              },
            },
          },
          "configSets": Object {
            "default": Array [
              "repositories",
              "packages",
              "cfnHup",
              "config",
              "restart",
            ],
          },
          "packages": Object {
            "commands": Object {
              "10-docker-machine": Object {
                "command": "curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-\`uname -s\`-\`uname -m\` > /tmp/docker-machine && install /tmp/docker-machine /usr/bin/docker-machine",
              },
              "20-gitlab-runner-start": Object {
                "command": "gitlab-runner start",
              },
            },
            "packages": Object {
              "yum": Object {
                "docker": Array [],
                "gitlab-runner": Array [],
                "tzdata": Array [],
              },
            },
          },
          "repositories": Object {
            "commands": Object {
              "10-gitlab-runner": Object {
                "command": "curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | bash",
              },
            },
          },
          "restart": Object {
            "commands": Object {
              "10-gitlab-runner-restart": Object {
                "command": "gitlab-runner restart",
              },
            },
          },
        },
      },
      "Properties": Object {
        "DesiredCapacity": "1",
        "LaunchConfigurationName": Object {
          "Ref": "ManagerAutoscalingGroupLaunchConfig078E7BD8",
        },
        "MaxSize": "1",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "gitlab-runner/ManagerAutoscalingGroup",
          },
        ],
        "VPCZoneIdentifier": Array [
          "priv1",
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingRollingUpdate": Object {
          "PauseTime": "PT15M",
          "SuspendProcesses": Array [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions",
          ],
          "WaitOnResourceSignals": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ManagerAutoscalingGroupInstanceProfile7C061EF0": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ManagerRole08FB5B64",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ManagerAutoscalingGroupLaunchConfig078E7BD8": Object {
      "DependsOn": Array [
        "ManagerRoleDefaultPolicy9C31350E",
        "ManagerRole08FB5B64",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "ManagerAutoscalingGroupInstanceProfile7C061EF0",
        },
        "ImageId": Object {
          "Fn::FindInMap": Array [
            "ManagerAutoscalingGroupAmiMap402DC0D6",
            Object {
              "Ref": "AWS::Region",
            },
            "ami",
          ],
        },
        "InstanceType": "t3.nano",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ManagerSecurityGroup288FD437",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
yum update -y aws-cfn-bootstrap
# fingerprint: 243579d3ca77cf3a
(
  set +e
  /opt/aws/bin/cfn-init -v --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource ManagerAutoscalingGroupASGE4841860 -c default
  /opt/aws/bin/cfn-signal -e $? --region ",
                Object {
                  "Ref": "AWS::Region",
                },
                " --stack ",
                Object {
                  "Ref": "AWS::StackName",
                },
                " --resource ManagerAutoscalingGroupASGE4841860
  cat /var/log/cfn-init.log >&2
)",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ManagerRole08FB5B64": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "s3:ListObjects*",
                    "s3:GetObject*",
                    "s3:DeleteObject*",
                    "s3:PutObject*",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        Object {
                          "Fn::GetAtt": Array [
                            "CacheBucket41D9D0B0",
                            "Arn",
                          ],
                        },
                        "/*",
                      ],
                    ],
                  },
                },
                Object {
                  "Action": "s3:ListBucket",
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "CacheBucket41D9D0B0",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Cache",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "ec2:CreateKeyPair",
                    "ec2:DeleteKeyPair",
                    "ec2:ImportKeyPair",
                    "ec2:Describe*",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": Array [
                    "ec2:CreateTags",
                    "ssm:UpdateInstanceInformation",
                  ],
                  "Condition": Object {
                    "ForAllValues:StringEquals": Object {
                      "aws:TagKeys": Array [
                        "Name",
                      ],
                    },
                    "StringEquals": Object {
                      "ec2:InstanceType": "t3.micro",
                      "ec2:Region": Object {
                        "Ref": "AWS::Region",
                      },
                    },
                    "StringLike": Object {
                      "aws:RequestTag/Name": "*gitlab-runner-*",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": Array [
                    "ec2:RunInstances",
                    "ec2:RequestSpotInstances",
                  ],
                  "Condition": Object {
                    "ArnEqualsIfExists": Object {
                      "ec2:InstanceProfile": Object {
                        "Fn::GetAtt": Array [
                          "RunnersInstanceProfile",
                          "Arn",
                        ],
                      },
                      "ec2:Vpc": Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            "arn:",
                            Object {
                              "Ref": "AWS::Partition",
                            },
                            ":ec2:",
                            Object {
                              "Ref": "AWS::Region",
                            },
                            ":",
                            Object {
                              "Ref": "AWS::AccountId",
                            },
                            ":vpc/vpc123",
                          ],
                        ],
                      },
                    },
                    "StringEqualsIfExists": Object {
                      "ec2:InstanceType": "t3.micro",
                      "ec2:Region": Object {
                        "Ref": "AWS::Region",
                      },
                      "ec2:Tenancy": "default",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": Array [
                    "ec2:TerminateInstances",
                    "ec2:StopInstances",
                    "ec2:StartInstances",
                    "ec2:RebootInstances",
                  ],
                  "Condition": Object {
                    "ArnEquals": Object {
                      "ec2:InstanceProfile": Object {
                        "Fn::GetAtt": Array [
                          "RunnersInstanceProfile",
                          "Arn",
                        ],
                      },
                    },
                    "StringLike": Object {
                      "ec2:ResourceTag/Name": "*gitlab-runner-*",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": "iam:PassRole",
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "RunnersRole1AC39F4E",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Runners",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ManagerRoleDefaultPolicy9C31350E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "cloudformation:DescribeStackResource",
                "cloudformation:SignalResource",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AWS::StackId",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ManagerRoleDefaultPolicy9C31350E",
        "Roles": Array [
          Object {
            "Ref": "ManagerRole08FB5B64",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ManagerSecurityGroup288FD437": Object {
      "Properties": Object {
        "GroupDescription": "Security group for GitLab Runners Manager.",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "SSH traffic",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22,
          },
        ],
        "VpcId": "vpc123",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RunnersInstanceProfile": Object {
      "Properties": Object {
        "InstanceProfileName": "RunnersInstanceProfile",
        "Roles": Array [
          Object {
            "Ref": "RunnersRole1AC39F4E",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "RunnersRole1AC39F4E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RunnersSecurityGroup2A22C282": Object {
      "Properties": Object {
        "GroupDescription": "Security group for GitLab Runners.",
        "GroupName": "gitlab-runner-RunnersSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": "vpc123",
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RunnersSecurityGroupfromgitlabrunnerManagerSecurityGroup036D51A122875D21A6": Object {
      "Properties": Object {
        "Description": "SSH traffic from Manager",
        "FromPort": 22,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RunnersSecurityGroup2A22C282",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ManagerSecurityGroup288FD437",
            "GroupId",
          ],
        },
        "ToPort": 22,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "RunnersSecurityGroupfromgitlabrunnerManagerSecurityGroup036D51A12376CE6A4DF2": Object {
      "Properties": Object {
        "Description": "SSH traffic from Docker",
        "FromPort": 2376,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "RunnersSecurityGroup2A22C282",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ManagerSecurityGroup288FD437",
            "GroupId",
          ],
        },
        "ToPort": 2376,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
  },
}
`;
